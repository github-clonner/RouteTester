[outbound]
;exten => _X.,1,Dial(SIP/${EXTEN}@LVA1BKAM01,,b(outbound^set_handler^1))
exten => _X.,1,Dial(SIP/LVA1BKAM01/${EXTEN},,gFcrb(outbound^set_handler^1))
same => n,hangup()

exten => set_handler,1,Set(CHANNEL(hangup_handler_push)=outbound,outbound_handler,1)
;exten => set_handler,n,hangup()
exten => set_handler,n,Return()

exten => outbound_handler,1,NoOp(Destination channel has hungup)
same => n,Set(HANGUPCAUSE_STRING=${HANGUPCAUSE_KEYS()})

; If no hangup causes are available then its probably because it is a regular call and the call ended normally so we just return.

same => n,ExecIf($["${HANGUPCAUSE_STRING}" = ""]?Return())
same => n,NoOp(Got Channel ID ${HANGUPCAUSE_STRING} master ${MASTERCHANNEL} with Technology Cause Code ${HANGUPCAUSE(${HANGUPCAUSE_STRING},tech)}, Asterisk Cause Code ${HANGUPCAUSE(${HANGUPCAUSE_STRING},ast)})
same => n,Set(SIPcause=${HANGUPCAUSE(${HANGUPCAUSE_STRING},tech)})
same => n,Set(SIPcode=${CUT(SIPcause," ",2)})
same => n,Set(SIPmsg=${SIPcause:8})
same => n,Agi(agi://localhost:6969/AGIHangup.agi,${SIPcause},${SIPcode},${SIPmsg})
same => n,Return()



[outbound-old]
exten => _X.,1,NoOp("Test Call")
same => n,Set(CHANNEL(hangup_handler_push)=handler,s,1)
same => n,Dial(SIP/LVA1BKAM01/${EXTEN},10)
;same => n,wait(5)
;same => n,Set(SIPCAUSECODE=${HASH(SIP_CAUSE,${CDR(dstchannel)})})
;same => n,Set(CAUSE2=${HANGUPCAUSE(${CDR(dstchannel)},SIP)})
same => n,Verbose(0, User Agent: ${SIPUSERAGENT})
same => n,Agi(agi://localhost:6969/AGIHangup.agi)
same => n,Hangup()



[handler]

exten => s,1,NoOp("Handling Hangup Causes")
same => n,Set(HANGUPCAUSE_STRING=${HANGUPCAUSE_KEYS()})
same => n,Set(SIPCAUSECODE=${HASH(SIP_CAUSE,${CHANNEL})})
same => n,Set(CAUSE2=${HANGUPCAUSE(${CHANNEL},SIP)})
same => n,Verbose(0, Channels with hangup cause information: ${HANGUPCAUSE_STRING})
same => n,Verbose(0, User Agent: ${SIPUSERAGENT})
same => n,Agi(agi://localhost:6969/AGIHangup.agi)
same => n,Return()




[inbound]


[dummy-exten]
exten => 100,1,Answer
;same => n,Playback(tt-weasels)
;same => n,Wait(10)
;same => n,Playback(tt-weasels)
;same => n,Playback(tt-weasels)
;same => n,Playback(tt-weasels)
;same => n,wait(10)
;same => n,Playback(goodbye)
same => n,Hangup



